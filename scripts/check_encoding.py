#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ .md —Ñ–∞–π–ª–æ–≤ –≤ UTF-8 –±–µ–∑ BOM.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/check_encoding.py                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    python scripts/check_encoding.py --dry-run          # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    python scripts/check_encoding.py --backup-dir ./bak # –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è backup
"""

import os
import sys
import argparse
import shutil
from pathlib import Path
from typing import List, Tuple, Dict
from datetime import datetime

try:
    import chardet
except ImportError:
    print("–û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å 'chardet'")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install chardet")
    sys.exit(1)


class EncodingChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, backup_dir: str = "encoding_backups", dry_run: bool = False, root_dir: Path = None):
        self.backup_dir = Path(backup_dir)
        self.dry_run = dry_run
        self.root_dir = root_dir if root_dir else Path.cwd()
        self.report = {
            'checked': [],
            'converted': [],
            'errors': [],
            'already_utf8': []
        }
        
    def detect_encoding(self, file_path: Path) -> Tuple[str, float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞.
        
        Returns:
            Tuple[str, float]: (encoding, confidence)
        """
        with open(file_path, 'rb') as f:
            raw_data = f.read()
            result = chardet.detect(raw_data)
            return result['encoding'], result['confidence']
    
    def is_utf8_bom(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ BOM –≤ UTF-8 —Ñ–∞–π–ª–µ."""
        with open(file_path, 'rb') as f:
            bom = f.read(3)
            return bom == b'\xef\xbb\xbf'
    
    def convert_to_utf8(self, file_path: Path, source_encoding: str) -> bool:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ UTF-8 –±–µ–∑ BOM.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            source_encoding: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            with open(file_path, 'r', encoding=source_encoding, errors='ignore') as f:
                content = f.read()
            
            # –°–æ–∑–¥–∞—ë–º backup
            if not self.dry_run:
                self._create_backup(file_path)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ UTF-8 –±–µ–∑ BOM
            if not self.dry_run:
                with open(file_path, 'w', encoding='utf-8', newline='\n') as f:
                    f.write(content)
            
            return True
            
        except Exception as e:
            self.report['errors'].append({
                'file': str(file_path),
                'error': str(e)
            })
            return False
    
    def remove_bom(self, file_path: Path) -> bool:
        """–£–¥–∞–ª—è–µ—Ç BOM –∏–∑ UTF-8 —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, 'r', encoding='utf-8-sig') as f:
                content = f.read()
            
            if not self.dry_run:
                self._create_backup(file_path)
                with open(file_path, 'w', encoding='utf-8', newline='\n') as f:
                    f.write(content)
            
            return True
            
        except Exception as e:
            self.report['errors'].append({
                'file': str(file_path),
                'error': str(e)
            })
            return False
    
    def _create_backup(self, file_path: Path):
        """–°–æ–∑–¥–∞—ë—Ç backup —Ñ–∞–π–ª–∞."""
        if not self.backup_dir.exists():
            self.backup_dir.mkdir(parents=True)
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è backup
        try:
            relative_path = file_path.relative_to(self.root_dir)
        except ValueError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤–Ω–µ root_dir, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            relative_path = Path(file_path.name)
        
        backup_path = self.backup_dir / relative_path
        backup_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(file_path, backup_path)
    
    def check_file(self, file_path: Path) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª.
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        """
        try:
            encoding, confidence = self.detect_encoding(file_path)
            
            result = {
                'file': str(file_path),
                'encoding': encoding,
                'confidence': confidence
            }
            
            self.report['checked'].append(result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            if encoding and encoding.lower() == 'ascii':
                # ASCII - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ UTF-8, –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
                self.report['already_utf8'].append(result)
                return result
            
            elif encoding and 'utf-8' in encoding.lower():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOM
                if self.is_utf8_bom(file_path):
                    print(f"  ‚ö†Ô∏è  UTF-8 —Å BOM: {file_path}")
                    if self.remove_bom(file_path):
                        result['action'] = 'removed_bom'
                        self.report['converted'].append(result)
                    return result
                else:
                    # UTF-8 –±–µ–∑ BOM - –∏–¥–µ–∞–ª—å–Ω–æ
                    self.report['already_utf8'].append(result)
                    return result
            
            else:
                # –ù—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                print(f"  üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∏–∑ {encoding} –≤ UTF-8: {file_path}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
                encodings_to_try = [encoding, 'cp1251', 'cp866', 'windows-1252', 'iso-8859-1']
                
                for enc in encodings_to_try:
                    if enc is None:
                        continue
                    try:
                        if self.convert_to_utf8(file_path, enc):
                            result['action'] = 'converted'
                            result['from_encoding'] = enc
                            self.report['converted'].append(result)
                            break
                    except:
                        continue
                
                return result
                
        except Exception as e:
            error = {
                'file': str(file_path),
                'error': str(e)
            }
            self.report['errors'].append(error)
            return error
    
    def scan_directory(self, root_dir: Path = Path('.')) -> List[Path]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ .md —Ñ–∞–π–ª–æ–≤.
        
        Args:
            root_dir: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            List[Path]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö .md —Ñ–∞–π–ª–æ–≤
        """
        md_files = []
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        ignore_dirs = {
            '.git', 'node_modules', '__pycache__', '.venv', 'venv',
            'encoding_backups', '.cursor', '.vscode', 'build', 'dist'
        }
        
        for path in root_dir.rglob('*.md'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            if any(part in ignore_dirs for part in path.parts):
                continue
            md_files.append(path)
        
        return sorted(md_files)
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ."""
        report_lines = [
            "=" * 80,
            "–û–¢–ß–Å–¢ –û –ü–†–û–í–ï–†–ö–ï –ö–û–î–ò–†–û–í–ö–ò .md –§–ê–ô–õ–û–í",
            "=" * 80,
            f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"–†–µ–∂–∏–º: {'–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ (dry-run)' if self.dry_run else '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è'}",
            "",
            f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
            f"  –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.report['checked'])}",
            f"  –£–∂–µ –≤ UTF-8: {len(self.report['already_utf8'])}",
            f"  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(self.report['converted'])}",
            f"  –û—à–∏–±–æ–∫: {len(self.report['errors'])}",
            ""
        ]
        
        if self.report['converted']:
            report_lines.append("‚úÖ –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
            for item in self.report['converted']:
                from_enc = item.get('from_encoding', 'unknown')
                action = item.get('action', 'converted')
                if action == 'removed_bom':
                    report_lines.append(f"  - {item['file']} (—É–¥–∞–ª—ë–Ω BOM)")
                else:
                    report_lines.append(f"  - {item['file']} (–∏–∑ {from_enc})")
            report_lines.append("")
        
        if self.report['errors']:
            report_lines.append("‚ùå –û–®–ò–ë–ö–ò:")
            for item in self.report['errors']:
                report_lines.append(f"  - {item['file']}: {item['error']}")
            report_lines.append("")
        
        if not self.report['converted'] and not self.report['errors']:
            report_lines.append("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –≤ UTF-8 –±–µ–∑ BOM. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            report_lines.append("")
        
        report_lines.append("=" * 80)
        
        return "\n".join(report_lines)
    
    def save_report(self, filename: str = "encoding_report.txt"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª."""
        report_content = self.generate_report()
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"\nüìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {filename}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ .md —Ñ–∞–π–ª–æ–≤ –≤ UTF-8 –±–µ–∑ BOM'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏'
    )
    parser.add_argument(
        '--backup-dir',
        default='encoding_backups',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è backup —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: encoding_backups)'
    )
    parser.add_argument(
        '--no-report',
        action='store_true',
        help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª'
    )
    
    args = parser.parse_args()
    
    print("=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê –ö–û–î–ò–†–û–í–ö–ò .md –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    if args.dry_run:
        print("‚ö†Ô∏è  –†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê (—Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã)")
    else:
        print("üîß –†–µ–∂–∏–º: –ü–†–û–í–ï–†–ö–ê –ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø")
        print(f"üíæ Backup –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.backup_dir}/")
    
    print()
    
    root_dir = Path.cwd()
    checker = EncodingChecker(backup_dir=args.backup_dir, dry_run=args.dry_run, root_dir=root_dir)
    
    print("üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ .md —Ñ–∞–π–ª–æ–≤...")
    md_files = checker.scan_directory(root_dir)
    
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(md_files)} .md —Ñ–∞–π–ª–æ–≤")
    print()
    
    print("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª—ã...")
    for md_file in md_files:
        checker.check_file(md_file)
    
    print()
    report_text = checker.generate_report()
    print(report_text)
    
    if not args.no_report:
        checker.save_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
    return 1 if checker.report['errors'] else 0


if __name__ == '__main__':
    sys.exit(main())

