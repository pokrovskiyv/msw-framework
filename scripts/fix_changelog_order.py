#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–µ—Ä—Å–∏–π –≤ CHANGELOG.md.

–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—è–¥–∫–æ–º –≤–µ—Ä—Å–∏–π, –∫–æ–≥–¥–∞ –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏
–∏–¥—É—Ç –ø–æ—Å–ª–µ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.0 –ø–æ—Å–ª–µ 1.1.0).

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python scripts/fix_changelog_order.py
  python scripts/fix_changelog_order.py --dry-run
"""

import re
import argparse
from pathlib import Path
from typing import List, Tuple

def get_project_root() -> Path:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞."""
    return Path(__file__).parent.parent

def parse_version(version_str: str) -> Tuple[int, int, int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Å–∏–∏ –≤ –∫–æ—Ä—Ç–µ–∂ (major, minor, patch)."""
    parts = version_str.split('.')
    return (int(parts[0]), int(parts[1]), int(parts[2]))

def find_version_blocks(content: str) -> List[Tuple[str, int, int]]:
    """
    –ù–∞–π—Ç–∏ –≤—Å–µ –±–ª–æ–∫–∏ –≤–µ—Ä—Å–∏–π –≤ CHANGELOG.
    
    Returns:
        List of (version, start_line, end_line)
    """
    lines = content.split('\n')
    version_blocks = []
    
    i = 0
    while i < len(lines):
        line = lines[i]
        match = re.match(r'^## \[(\d+\.\d+\.\d+)\]', line)
        if match:
            version = match.group(1)
            start_line = i
            
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ (—Å–ª–µ–¥—É—é—â–∞—è –≤–µ—Ä—Å–∏—è –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
            end_line = len(lines)
            for j in range(i + 1, len(lines)):
                if re.match(r'^## \[(\d+\.\d+\.\d+)\]', lines[j]):
                    end_line = j
                    break
            
            version_blocks.append((version, start_line, end_line))
            i = end_line
        else:
            i += 1
    
    return version_blocks

def fix_changelog_order(changelog_path: Path, dry_run: bool = False) -> bool:
    """
    –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤–µ—Ä—Å–∏–π –≤ CHANGELOG.md.
    
    Args:
        changelog_path: –ø—É—Ç—å –∫ CHANGELOG.md
        dry_run: —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    
    Returns:
        True –µ—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    if not changelog_path.exists():
        print(f"‚ùå –§–∞–π–ª {changelog_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        content = changelog_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫–∏ –≤–µ—Ä—Å–∏–π
    version_blocks = find_version_blocks(content)
    
    if len(version_blocks) < 2:
        print("‚úÖ –ú–µ–Ω–µ–µ 2 –≤–µ—Ä—Å–∏–π –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–µ—Ä—Å–∏–π
    needs_fix = False
    for i in range(len(version_blocks) - 1):
        current_version = version_blocks[i][0]
        next_version = version_blocks[i + 1][0]
        
        current_tuple = parse_version(current_version)
        next_tuple = parse_version(next_version)
        
        if current_tuple < next_tuple:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {current_version} < {next_version}")
            needs_fix = True
    
    if not needs_fix:
        print("‚úÖ –ü–æ—Ä—è–¥–æ–∫ –≤–µ—Ä—Å–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        return False
    
    if dry_run:
        print("üîç DRY RUN: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        return True
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    lines = content.split('\n')
    new_lines = []
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏
    first_version_start = version_blocks[0][1]
    new_lines.extend(lines[:first_version_start])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –≤–µ—Ä—Å–∏–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_blocks = sorted(version_blocks, key=lambda x: parse_version(x[0]), reverse=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for i, (version, start_line, end_line) in enumerate(sorted_blocks):
        block_lines = lines[start_line:end_line]
        new_lines.extend(block_lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if i < len(sorted_blocks) - 1:
            new_lines.append("")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        new_content = '\n'.join(new_lines)
        changelog_path.write_text(new_content, encoding="utf-8")
        print("‚úÖ CHANGELOG.md –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤–µ—Ä—Å–∏–π –≤ CHANGELOG.md",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/fix_changelog_order.py
  python scripts/fix_changelog_order.py --dry-run
        """
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    project_root = get_project_root()
    changelog_path = project_root / "CHANGELOG.md"
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤–µ—Ä—Å–∏–π –≤ CHANGELOG.md")
    print("=" * 50)
    
    fixed = fix_changelog_order(changelog_path, args.dry_run)
    
    if fixed and not args.dry_run:
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    elif fixed and args.dry_run:
        print("\nüîç –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run")
    else:
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
    
    return 0

if __name__ == "__main__":
    exit(main())
