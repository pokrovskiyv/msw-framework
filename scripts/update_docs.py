#!/usr/bin/env python3
"""
–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git –∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å CHANGELOG, ASSESSMENT –∏ README.
"""

import os
import sys
import argparse
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional, Tuple
import subprocess
import re

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def get_project_root() -> Path:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞."""
    return Path(__file__).parent.parent

def detect_major_changes(changes: Dict[str, List[str]]) -> Tuple[bool, List[str]]:
    """
    –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–∂–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    
    Returns:
        (has_major_changes, list_of_major_files)
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞–∂–æ—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    major_patterns = [
        'weeks/',
        'templates/',
        'course_cli/',
        'Personal_Contract_',
        'Systemic_Career_Framework_',
        '.cursorrules',
        'CURSOR_SETUP.md'
    ]
    
    major_files = []
    all_changed_files = changes['added'] + changes['modified'] + changes['deleted']
    
    for file_path in all_changed_files:
        for pattern in major_patterns:
            if pattern in file_path:
                major_files.append(file_path)
                break
    
    return len(major_files) > 0, major_files

def categorize_changes(changes: Dict[str, List[str]]) -> Dict[str, List[str]]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –ª—É—á—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CHANGELOG.
    
    Returns:
        {
            'weeks': [...],
            'templates': [...],
            'cli': [...],
            'contracts': [...],
            'framework': [...],
            'docs': [...],
            'other': [...]
        }
    """
    categorized = {
        'weeks': [],
        'templates': [],
        'cli': [],
        'contracts': [],
        'framework': [],
        'docs': [],
        'other': []
    }
    
    all_changed_files = changes['added'] + changes['modified'] + changes['deleted']
    
    for file_path in all_changed_files:
        if 'weeks/' in file_path:
            categorized['weeks'].append(file_path)
        elif 'templates/' in file_path:
            categorized['templates'].append(file_path)
        elif 'course_cli/' in file_path:
            categorized['cli'].append(file_path)
        elif 'Personal_Contract_' in file_path:
            categorized['contracts'].append(file_path)
        elif 'Systemic_Career_Framework_' in file_path:
            categorized['framework'].append(file_path)
        elif file_path.endswith('.md') and '/' not in file_path:
            categorized['docs'].append(file_path)
        else:
            categorized['other'].append(file_path)
    
    return categorized

def get_git_changes(project_root: Path, days: int = 7) -> Dict[str, List[str]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ git –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
    
    Returns:
        {
            'added': [...],
            'modified': [...],
            'deleted': [...]
        }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        result = subprocess.run(
            ['git', 'log', f'--since={days}.days.ago', '--name-status', '--pretty=format:'],
            cwd=project_root,
            capture_output=True,
            text=True
        )
        
        changes = {'added': set(), 'modified': set(), 'deleted': set()}
        
        for line in result.stdout.strip().split('\n'):
            if not line:
                continue
            
            parts = line.split('\t')
            if len(parts) < 2:
                continue
            
            status, file_path = parts[0], parts[1]
            
            if status == 'A':
                changes['added'].add(file_path)
            elif status == 'M':
                changes['modified'].add(file_path)
            elif status == 'D':
                changes['deleted'].add(file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–∫–∏
        return {k: sorted(list(v)) for k, v in changes.items()}
    
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å git –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}{Colors.ENDC}")
        return {'added': [], 'modified': [], 'deleted': []}

def get_current_version(project_root: Path) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ CHANGELOG."""
    changelog_path = project_root / "CHANGELOG.md"
    
    if not changelog_path.exists():
        return "0.0.0"
    
    try:
        content = changelog_path.read_text(encoding="utf-8")
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –≤–∏–¥–∞ ## [X.Y.Z]
        match = re.search(r'## \[(\d+\.\d+\.\d+)\]', content)
        if match:
            return match.group(1)
    except Exception:
        pass
    
    return "0.0.0"

def suggest_next_version(current: str, changes: Dict[str, List[str]]) -> str:
    """
    –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    
    –ü—Ä–∞–≤–∏–ª–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
    - MAJOR (X.0.0): –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    - MINOR (x.Y.0): –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    - PATCH (x.y.Z): –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    """
    major, minor, patch = map(int, current.split('.'))
    
    # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –º–∞–∂–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    has_major, major_files = detect_major_changes(changes)
    
    if not has_major:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞–∂–æ—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, —ç—Ç–æ patch
        return f"{major}.{minor}.{patch + 1}"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –º–∞–∂–æ—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    categorized = categorize_changes(changes)
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ç—Ä–µ–±—É—é—Ç MAJOR –≤–µ—Ä—Å–∏–∏)
    critical_changes = (
        len(categorized['contracts']) > 0 or  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
        len(categorized['framework']) > 0 or  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ
        any('.cursorrules' in file for file in changes['modified'] + changes['deleted'])  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ .cursorrules
    )
    
    # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (—Ç—Ä–µ–±—É–µ—Ç MINOR –≤–µ—Ä—Å–∏–∏)
    new_features = (
        len(categorized['weeks']) > 0 or      # –ù–æ–≤—ã–µ/–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
        len(categorized['templates']) > 0 or  # –ù–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
        len(categorized['cli']) > 0 or        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ CLI
        len(changes['added']) > 2             # –ú–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    )
    
    if critical_changes:
        return f"{major + 1}.0.0"
    elif new_features:
        return f"{major}.{minor + 1}.0"
    else:
        # –ú–∞–∂–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–µ –Ω–æ–≤—ã–µ —Ñ–∏—á–∏
        return f"{major}.{minor}.{patch + 1}"

def generate_changelog_entry(
    version: str,
    changes: Dict[str, List[str]],
    project_root: Path
) -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ CHANGELOG –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞."""
    
    date_str = datetime.now().strftime("%Y-%m-%d")
    
    entry = f"## [{version}] - {date_str}\n\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    categorized = categorize_changes(changes)
    has_major, major_files = detect_major_changes(changes)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    entry += "### üéØ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if categorized['weeks']:
        entry += "**–û–±–Ω–æ–≤–ª–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞!** –ú—ã —É–ª—É—á—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–¥–µ–ª—å, –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–¥–µ–ª–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –µ—â—ë —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.\n\n"
    elif categorized['templates']:
        entry += "**–ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã!** –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª–µ–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —á–µ–∫-–ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.\n\n"
    elif categorized['cli']:
        entry += "**–£–ª—É—á—à–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ–º!** –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å—Ç–∞–ª–æ –µ—â—ë —É–¥–æ–±–Ω–µ–µ.\n\n"
    elif categorized['contracts']:
        entry += "**–û–±–Ω–æ–≤–ª—ë–Ω –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç!** –®–∞–±–ª–æ–Ω —Å—Ç–∞–ª –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—å–µ—Ä—ã.\n\n"
    elif categorized['framework']:
        entry += "**–†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –∫—É—Ä—Å–∞!** –ú—ã —É—Ç–æ—á–Ω–∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –ø–æ–¥—Ö–æ–¥—ã –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–∞—Ä—å–µ—Ä–µ.\n\n"
    else:
        entry += "**–ö—É—Ä—Å —Å—Ç–∞–ª –µ—â—ë –ª—É—á—à–µ!** –ú—ã –≤–Ω–µ—Å–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.\n\n"
    
    # –ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    entry += "### ‚ú® –ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç –≤–∞–º\n\n"
    
    if categorized['weeks']:
        entry += "- **üìö –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã** ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–¥–µ–ª—å —Å—Ç–∞–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–µ–µ\n"
        entry += "- **üéØ –ß—ë—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏** ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –∏ –∫–∞–∫ –¥–µ–ª–∞—Ç—å\n"
        entry += "- **üí° –ù–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏** ‚Äî –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ø–æ–ª–µ–∑–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è\n\n"
    
    if categorized['templates']:
        entry += "- **üìã –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã** ‚Äî –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –Ω—É–ª—è\n"
        entry += "- **‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã** ‚Äî –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ\n"
        entry += "- **üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è** ‚Äî –≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n\n"
    
    if categorized['cli']:
        entry += "- **‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è** ‚Äî –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        entry += "- **üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** ‚Äî –≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç–µ—Å—å –ø–æ –∫—É—Ä—Å—É\n"
        entry += "- **üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã** ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ\n\n"
    
    if categorized['contracts']:
        entry += "- **üìã –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç** ‚Äî –ª–µ–≥—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–∞—Ä—å–µ—Ä—ã\n"
        entry += "- **üéØ –ß—ë—Ç–∫–∏–µ —Ü–µ–ª–∏** ‚Äî –∑–Ω–∞–µ—Ç–µ, –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è\n"
        entry += "- **üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** ‚Äî –≤–∏–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç\n\n"
    
    if categorized['framework']:
        entry += "- **üß† –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã** ‚Äî –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å—Ç–∞–ª–∏ —è—Å–Ω–µ–µ\n"
        entry += "- **üéØ –¢–æ—á–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ** ‚Äî –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        entry += "- **üí° –ë–æ–ª—å—à–µ –∏–Ω—Å–∞–π—Ç–æ–≤** ‚Äî –≥–ª—É–±–∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n"
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    entry += "### üõ†Ô∏è –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏\n\n"
    
    if changes['added']:
        entry += "- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    if changes['modified']:
        entry += "- –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    if changes['deleted']:
        entry += "- –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã\n"
    
    entry += f"- –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(changes['added']) + len(changes['modified']) + len(changes['deleted'])}\n\n"
    
    # –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    entry += "### üí° –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –≤–∞—Å\n\n"
    entry += "**–ù–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ!** –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ –∫—É—Ä—Å—É ‚Äî –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
    
    entry += "---\n\n"
    
    return entry

def update_changelog_interactive(project_root: Path, changes: Dict[str, List[str]]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG."""
    changelog_path = project_root / "CHANGELOG.md"
    
    if not changelog_path.exists():
        print(f"{Colors.FAIL}‚ùå CHANGELOG.md –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.ENDC}")
        return
    
    current_version = get_current_version(project_root)
    suggested_version = suggest_next_version(current_version, changes)
    
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG{Colors.ENDC}")
    print(f"{Colors.OKCYAN}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}{Colors.ENDC}")
    print(f"{Colors.OKGREEN}–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {suggested_version}{Colors.ENDC}\n")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    version_input = input(f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é (Enter –¥–ª—è {suggested_version}): ").strip()
    version = version_input if version_input else suggested_version
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É
    entry = generate_changelog_entry(version, changes, project_root)
    
    print(f"\n{Colors.OKCYAN}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞:{Colors.ENDC}")
    print(f"{Colors.BOLD}{'‚îÄ'*70}{Colors.ENDC}")
    print(entry)
    print(f"{Colors.BOLD}{'‚îÄ'*70}{Colors.ENDC}\n")
    
    confirm = input(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –≤ CHANGELOG? (y/n): ").strip().lower()
    
    if confirm == 'y':
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π CHANGELOG
            content = changelog_path.read_text(encoding="utf-8")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ [Unreleased] –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
            unreleased_pos = content.find("## [Unreleased]")
            
            if unreleased_pos != -1:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ [Unreleased]
                next_version_pos = content.find("\n## [", unreleased_pos + 1)
                if next_version_pos == -1:
                    next_version_pos = content.find("\n---", unreleased_pos)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                if next_version_pos != -1:
                    new_content = (
                        content[:next_version_pos] + 
                        "\n" + entry +
                        content[next_version_pos:]
                    )
                else:
                    new_content = content + "\n" + entry
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ Unreleased, –∏—â–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é
                first_version_pos = content.find("## [")
                if first_version_pos != -1:
                    new_content = (
                        content[:first_version_pos] +
                        entry + "\n" +
                        content[first_version_pos:]
                    )
                else:
                    new_content = content + "\n" + entry
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            changelog_path.write_text(new_content, encoding="utf-8")
            print(f"{Colors.OKGREEN}‚úÖ CHANGELOG –æ–±–Ω–æ–≤–ª—ë–Ω!{Colors.ENDC}")
            
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}‚è∏Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ{Colors.ENDC}")

def suggest_assessment_updates(project_root: Path, changes: Dict[str, List[str]]):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å, –∫–∞–∫–∏–µ –±–ª–æ–∫–∏ ASSESSMENT –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."""
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ASSESSMENT.md{Colors.ENDC}\n")
    
    suggestions = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ weeks/
    weeks_changes = [f for f in changes['added'] + changes['modified'] if 'weeks/' in f]
    if weeks_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ (8 –Ω–µ–¥–µ–ª—å)'")
        suggestions.append(f"  –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(weeks_changes)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Personal_Contract
    contract_changes = [f for f in changes['added'] + changes['modified'] 
                       if 'Personal_Contract' in f or 'contract' in f.lower()]
    if contract_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '3. –õ–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ templates/
    template_changes = [f for f in changes['added'] + changes['modified'] if 'templates/' in f]
    if template_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '6. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ examples/
    example_changes = [f for f in changes['added'] + changes['modified'] if 'examples/' in f]
    if example_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '7. –ö–µ–π—Å—ã –∏ –ø—Ä–∏–º–µ—Ä—ã'")
    
    if suggestions:
        for s in suggestions:
            print(f"{Colors.OKCYAN}{s}{Colors.ENDC}")
        print(f"\n{Colors.WARNING}üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!{Colors.ENDC}")
    else:
        print(f"{Colors.OKGREEN}‚úÖ ASSESSMENT –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π{Colors.ENDC}")

def check_readme_needs_update(project_root: Path, changes: Dict[str, List[str]]):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å README."""
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md{Colors.ENDC}\n")
    
    needs_update = False
    categorized = categorize_changes(changes)
    
    # –ù–æ–≤—ã–µ –Ω–µ–¥–µ–ª–∏ ‚Üí –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏
    if categorized['weeks']:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–µ–¥–µ–ª—å: {len(categorized['weeks'])}{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ README –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∏ –Ω–µ–¥–µ–ª–∏{Colors.ENDC}")
        needs_update = True
    
    # –ù–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã ‚Üí –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if categorized['templates']:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(categorized['templates'])}{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–®–∞–±–ª–æ–Ω—ã' –≤ README{Colors.ENDC}")
        needs_update = True
    
    # CLI –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üí –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª CLI
    if categorized['cli']:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω—ë–Ω CLI: {len(categorized['cli'])} —Ñ–∞–π–ª–æ–≤{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ–º' –≤ README{Colors.ENDC}")
        needs_update = True
    
    if not needs_update:
        print(f"{Colors.OKGREEN}‚úÖ README –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è{Colors.ENDC}")

def check_cursor_setup_needs_update(project_root: Path, changes: Dict[str, List[str]]):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å CURSOR_SETUP.md."""
    print(f"\n{Colors.BOLD}{Colors.HEADER}üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ CURSOR_SETUP.md{Colors.ENDC}\n")
    
    needs_update = False
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ .cursorrules
    cursorrules_changed = any('.cursorrules' in file for file in changes['modified'] + changes['deleted'])
    if cursorrules_changed:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω—ë–Ω .cursorrules{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –û–±–Ω–æ–≤–∏—Ç–µ CURSOR_SETUP.md —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏{Colors.ENDC}")
        needs_update = True
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ CLI
    cli_changed = any('course_cli/' in file for file in changes['modified'] + changes['added'])
    if cli_changed:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω—ë–Ω CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ CLI –≤ CURSOR_SETUP.md{Colors.ENDC}")
        needs_update = True
    
    if not needs_update:
        print(f"{Colors.OKGREEN}‚úÖ CURSOR_SETUP.md –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è{Colors.ENDC}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/update_docs.py
  python scripts/update_docs.py --days 14
  python scripts/update_docs.py --no-interactive
        """
    )
    
    parser.add_argument(
        '--days',
        type=int,
        default=7,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)'
    )
    
    parser.add_argument(
        '--no-interactive',
        action='store_true',
        help='–ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CHANGELOG)'
    )
    
    args = parser.parse_args()
    
    project_root = get_project_root()
    
    print(f"\n{Colors.BOLD}{'='*70}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.HEADER}üîß –ü–æ–º–æ—â–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏{Colors.ENDC}")
    print(f"{Colors.BOLD}{'='*70}{Colors.ENDC}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ git
    print(f"\n{Colors.OKCYAN}üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π...{Colors.ENDC}\n")
    changes = get_git_changes(project_root, days=args.days)
    
    total = len(changes['added']) + len(changes['modified']) + len(changes['deleted'])
    
    if total == 0:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–∏–ª–∏ git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω){Colors.ENDC}")
        print(f"{Colors.OKCYAN}üí° –í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é{Colors.ENDC}\n")
        return 0
    
    print(f"{Colors.OKGREEN}–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total}{Colors.ENDC}")
    print(f"  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(changes['added'])}")
    print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ: {len(changes['modified'])}")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {len(changes['deleted'])}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∂–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    has_major, major_files = detect_major_changes(changes)
    if has_major:
        print(f"\n{Colors.WARNING}üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞–∂–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {len(major_files)} —Ñ–∞–π–ª–æ–≤{Colors.ENDC}")
        for file in major_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  ‚Ä¢ {file}")
        if len(major_files) > 5:
            print(f"  ‚Ä¢ ... –∏ –µ—â—ë {len(major_files) - 5} —Ñ–∞–π–ª–æ–≤")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG (—Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    if not args.no_interactive:
        update_changelog_interactive(project_root, changes)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ASSESSMENT
    suggest_assessment_updates(project_root, changes)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
    check_readme_needs_update(project_root, changes)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CURSOR_SETUP.md
    check_cursor_setup_needs_update(project_root, changes)
    
    print(f"\n{Colors.BOLD}{'='*70}{Colors.ENDC}")
    print(f"{Colors.OKGREEN}‚úÖ –ì–æ—Ç–æ–≤–æ!{Colors.ENDC}\n")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

