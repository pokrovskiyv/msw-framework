#!/usr/bin/env python3
"""
–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git –∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å CHANGELOG, ASSESSMENT –∏ README.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional
import subprocess
import re

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def get_project_root() -> Path:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞."""
    return Path(__file__).parent.parent

def get_git_changes(project_root: Path, days: int = 7) -> Dict[str, List[str]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ git –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
    
    Returns:
        {
            'added': [...],
            'modified': [...],
            'deleted': [...]
        }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        result = subprocess.run(
            ['git', 'log', f'--since={days}.days.ago', '--name-status', '--pretty=format:'],
            cwd=project_root,
            capture_output=True,
            text=True
        )
        
        changes = {'added': set(), 'modified': set(), 'deleted': set()}
        
        for line in result.stdout.strip().split('\n'):
            if not line:
                continue
            
            parts = line.split('\t')
            if len(parts) < 2:
                continue
            
            status, file_path = parts[0], parts[1]
            
            if status == 'A':
                changes['added'].add(file_path)
            elif status == 'M':
                changes['modified'].add(file_path)
            elif status == 'D':
                changes['deleted'].add(file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–∫–∏
        return {k: sorted(list(v)) for k, v in changes.items()}
    
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å git –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}{Colors.ENDC}")
        return {'added': [], 'modified': [], 'deleted': []}

def get_current_version(project_root: Path) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ CHANGELOG."""
    changelog_path = project_root / "CHANGELOG.md"
    
    if not changelog_path.exists():
        return "0.0.0"
    
    try:
        content = changelog_path.read_text(encoding="utf-8")
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –≤–∏–¥–∞ ## [X.Y.Z]
        match = re.search(r'## \[(\d+\.\d+\.\d+)\]', content)
        if match:
            return match.group(1)
    except Exception:
        pass
    
    return "0.0.0"

def suggest_next_version(current: str, changes: Dict[str, List[str]]) -> str:
    """
    –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    
    –ü—Ä–∞–≤–∏–ª–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
    - MAJOR (X.0.0): –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    - MINOR (x.Y.0): –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    - PATCH (x.y.Z): –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    """
    major, minor, patch = map(int, current.split('.'))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± –∏–∑–º–µ–Ω–µ–Ω–∏–π
    total_changes = len(changes['added']) + len(changes['modified']) + len(changes['deleted'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –Ω–µ–¥–µ–ª–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö)
    critical_files = ['Personal_Contract', 'Systemic_Career_Framework']
    has_critical_changes = any(
        any(cf in file for cf in critical_files)
        for file in changes['modified'] + changes['deleted']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–æ–≤—ã–µ –Ω–µ–¥–µ–ª–∏, –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã)
    new_weeks = any('Week_' in file for file in changes['added'])
    new_templates = any('templates/' in file for file in changes['added'])
    has_new_features = new_weeks or new_templates or len(changes['added']) > 3
    
    if has_critical_changes:
        return f"{major + 1}.0.0"
    elif has_new_features:
        return f"{major}.{minor + 1}.0"
    else:
        return f"{major}.{minor}.{patch + 1}"

def generate_changelog_entry(
    version: str,
    changes: Dict[str, List[str]],
    project_root: Path
) -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫—É –∑–∞–ø–∏—Å–∏ –≤ CHANGELOG."""
    
    date_str = datetime.now().strftime("%Y-%m-%d")
    
    entry = f"## [{version}] - {date_str}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    weeks_added = [f for f in changes['added'] if 'weeks/Week_' in f]
    weeks_modified = [f for f in changes['modified'] if 'weeks/Week_' in f]
    templates_added = [f for f in changes['added'] if 'templates/' in f]
    templates_modified = [f for f in changes['modified'] if 'templates/' in f]
    docs_modified = [f for f in changes['modified'] if f.endswith('.md') and '/' not in f]
    
    # Added
    if changes['added']:
        entry += "### Added (–î–æ–±–∞–≤–ª–µ–Ω–æ)\n"
        
        if weeks_added:
            for file in weeks_added:
                week_name = Path(file).stem
                entry += f"- ‚úÖ **{file}** ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ {week_name}\n"
        
        if templates_added:
            for file in templates_added:
                template_name = Path(file).stem
                entry += f"- ‚úÖ **{file}** ‚Äî —à–∞–±–ª–æ–Ω {template_name}\n"
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        other_added = [f for f in changes['added'] 
                      if f not in weeks_added and f not in templates_added]
        for file in other_added[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ñ–∞–π–ª–∞–º–∏
            entry += f"- ‚úÖ **{file}**\n"
        
        entry += "\n"
    
    # Changed
    if changes['modified']:
        entry += "### Changed (–ò–∑–º–µ–Ω–µ–Ω–æ)\n"
        
        if weeks_modified:
            for file in weeks_modified:
                entry += f"- üîÑ **{file}** ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–¥–µ–ª–∏\n"
        
        if templates_modified:
            for file in templates_modified:
                entry += f"- üîÑ **{file}** ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞\n"
        
        if docs_modified:
            for file in docs_modified:
                entry += f"- üîÑ **{file}** ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        
        entry += "\n"
    
    # Deleted
    if changes['deleted']:
        entry += "### Removed (–£–¥–∞–ª–µ–Ω–æ)\n"
        for file in changes['deleted'][:5]:
            entry += f"- üóëÔ∏è **{file}**\n"
        entry += "\n"
    
    entry += "### Impact (–í–ª–∏—è–Ω–∏–µ)\n"
    entry += "- [–û–ø–∏—à–∏—Ç–µ –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞]\n\n"
    
    entry += "---\n\n"
    
    return entry

def update_changelog_interactive(project_root: Path, changes: Dict[str, List[str]]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG."""
    changelog_path = project_root / "CHANGELOG.md"
    
    if not changelog_path.exists():
        print(f"{Colors.FAIL}‚ùå CHANGELOG.md –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.ENDC}")
        return
    
    current_version = get_current_version(project_root)
    suggested_version = suggest_next_version(current_version, changes)
    
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG{Colors.ENDC}")
    print(f"{Colors.OKCYAN}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}{Colors.ENDC}")
    print(f"{Colors.OKGREEN}–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {suggested_version}{Colors.ENDC}\n")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    version_input = input(f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é (Enter –¥–ª—è {suggested_version}): ").strip()
    version = version_input if version_input else suggested_version
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É
    entry = generate_changelog_entry(version, changes, project_root)
    
    print(f"\n{Colors.OKCYAN}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞:{Colors.ENDC}")
    print(f"{Colors.BOLD}{'‚îÄ'*70}{Colors.ENDC}")
    print(entry)
    print(f"{Colors.BOLD}{'‚îÄ'*70}{Colors.ENDC}\n")
    
    confirm = input(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –≤ CHANGELOG? (y/n): ").strip().lower()
    
    if confirm == 'y':
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π CHANGELOG
            content = changelog_path.read_text(encoding="utf-8")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ [Unreleased] –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
            unreleased_pos = content.find("## [Unreleased]")
            
            if unreleased_pos != -1:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ [Unreleased]
                next_version_pos = content.find("\n## [", unreleased_pos + 1)
                if next_version_pos == -1:
                    next_version_pos = content.find("\n---", unreleased_pos)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                if next_version_pos != -1:
                    new_content = (
                        content[:next_version_pos] + 
                        "\n" + entry +
                        content[next_version_pos:]
                    )
                else:
                    new_content = content + "\n" + entry
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ Unreleased, –∏—â–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é
                first_version_pos = content.find("## [")
                if first_version_pos != -1:
                    new_content = (
                        content[:first_version_pos] +
                        entry + "\n" +
                        content[first_version_pos:]
                    )
                else:
                    new_content = content + "\n" + entry
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            changelog_path.write_text(new_content, encoding="utf-8")
            print(f"{Colors.OKGREEN}‚úÖ CHANGELOG –æ–±–Ω–æ–≤–ª—ë–Ω!{Colors.ENDC}")
            
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}‚è∏Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ{Colors.ENDC}")

def suggest_assessment_updates(project_root: Path, changes: Dict[str, List[str]]):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å, –∫–∞–∫–∏–µ –±–ª–æ–∫–∏ ASSESSMENT –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."""
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ASSESSMENT.md{Colors.ENDC}\n")
    
    suggestions = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ weeks/
    weeks_changes = [f for f in changes['added'] + changes['modified'] if 'weeks/' in f]
    if weeks_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ (8 –Ω–µ–¥–µ–ª—å)'")
        suggestions.append(f"  –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(weeks_changes)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Personal_Contract
    contract_changes = [f for f in changes['added'] + changes['modified'] 
                       if 'Personal_Contract' in f or 'contract' in f.lower()]
    if contract_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '3. –õ–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ templates/
    template_changes = [f for f in changes['added'] + changes['modified'] if 'templates/' in f]
    if template_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '6. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ examples/
    example_changes = [f for f in changes['added'] + changes['modified'] if 'examples/' in f]
    if example_changes:
        suggestions.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ '7. –ö–µ–π—Å—ã –∏ –ø—Ä–∏–º–µ—Ä—ã'")
    
    if suggestions:
        for s in suggestions:
            print(f"{Colors.OKCYAN}{s}{Colors.ENDC}")
        print(f"\n{Colors.WARNING}üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!{Colors.ENDC}")
    else:
        print(f"{Colors.OKGREEN}‚úÖ ASSESSMENT –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π{Colors.ENDC}")

def check_readme_needs_update(project_root: Path, changes: Dict[str, List[str]]):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å README."""
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md{Colors.ENDC}\n")
    
    needs_update = False
    
    # –ù–æ–≤—ã–µ –Ω–µ–¥–µ–ª–∏ ‚Üí –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏
    new_weeks = [f for f in changes['added'] if 'weeks/Week_' in f]
    if new_weeks:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–µ–ª—å: {len(new_weeks)}{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ README –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∏ –Ω–µ–¥–µ–ª–∏{Colors.ENDC}")
        needs_update = True
    
    # –ù–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã ‚Üí –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    new_templates = [f for f in changes['added'] if 'templates/' in f]
    if new_templates:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(new_templates)}{Colors.ENDC}")
        print(f"{Colors.OKCYAN}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–®–∞–±–ª–æ–Ω—ã' –≤ README{Colors.ENDC}")
        needs_update = True
    
    if not needs_update:
        print(f"{Colors.OKGREEN}‚úÖ README –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è{Colors.ENDC}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    project_root = get_project_root()
    
    print(f"\n{Colors.BOLD}{'='*70}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.HEADER}üîß –ü–æ–º–æ—â–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏{Colors.ENDC}")
    print(f"{Colors.BOLD}{'='*70}{Colors.ENDC}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ git
    print(f"\n{Colors.OKCYAN}üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...{Colors.ENDC}\n")
    changes = get_git_changes(project_root, days=7)
    
    total = len(changes['added']) + len(changes['modified']) + len(changes['deleted'])
    
    if total == 0:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–∏–ª–∏ git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω){Colors.ENDC}")
        print(f"{Colors.OKCYAN}üí° –í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é{Colors.ENDC}\n")
        return 0
    
    print(f"{Colors.OKGREEN}–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total}{Colors.ENDC}")
    print(f"  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(changes['added'])}")
    print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ: {len(changes['modified'])}")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {len(changes['deleted'])}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG
    update_changelog_interactive(project_root, changes)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ASSESSMENT
    suggest_assessment_updates(project_root, changes)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
    check_readme_needs_update(project_root, changes)
    
    print(f"\n{Colors.BOLD}{'='*70}{Colors.ENDC}")
    print(f"{Colors.OKGREEN}‚úÖ –ì–æ—Ç–æ–≤–æ!{Colors.ENDC}\n")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

