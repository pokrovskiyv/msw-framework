#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Coda –≤ Markdown —Ñ–æ—Ä–º–∞—Ç.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python export_coda_page.py --api-key YOUR_API_KEY
    
    –ò–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    set CODA_API_KEY=YOUR_API_KEY
    python export_coda_page.py
"""

import argparse
import os
import sys
import time
import json
from pathlib import Path

try:
    import requests
except ImportError:
    print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å 'requests' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install requests")
    sys.exit(1)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CODA_API_BASE = "https://coda.io/apis/v1"
DOC_ID = "TLUOWqMEYG"
PAGE_ID = "canvas-EeYMQYM-Km"
OUTPUT_DIR = "OtherMaterials"
MAX_WAIT_TIME = 300  # 5 –º–∏–Ω—É—Ç
POLL_INTERVAL = 3  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

# –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
PAGES_TO_EXPORT = [
    ("canvas-EeYMQYM-Km", "01_–ö—Ä–∞—Ç–∫–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ.md"),
    # –ü—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Å–∏—Å—Ç–µ–º (—Å–∞–º–∞—è —Ü–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!)
    ("canvas-62TnMzLNLR", "–ü—Ä–æ–º–ø—Ç_–ú–µ—Ç–æ–¥–∏—Å—Ç–∞.md"),
    ("canvas-esKlGmECPU", "–ü—Ä–æ–º–ø—Ç_–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞.md"),
    ("canvas-T-6C8aQTbX", "–ü—Ä–æ–º–ø—Ç_–û—Ü–µ–Ω—â–∏–∫–∞_–∫–∞—á–µ—Å—Ç–≤–∞.md"),
    ("canvas-Arii8C_CIr", "–ü—Ä–æ–º–ø—Ç_–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.md"),
    # –ü–æ–ª–µ–∑–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    ("canvas-CtaZg5nPth", "–ú–µ—Ç–∞–º–æ–¥–µ–ª—å_–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π_–ø–æ–¥—Å–∏—Å—Ç–µ–º—ã.md"),
    ("canvas-YDQ7uU-3Wv", "–°—Ü–µ–Ω–∞—Ä–∏–∏_—Ä–∞–±–æ—Ç—ã.md"),
]


def get_api_key():
    """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    parser = argparse.ArgumentParser(
        description="–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Coda –≤ Markdown",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python export_coda_page.py --api-key YOUR_API_KEY
  
  –° –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Windows PowerShell):
  $env:CODA_API_KEY="YOUR_API_KEY"
  python export_coda_page.py
  
  –° –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Windows CMD):
  set CODA_API_KEY=YOUR_API_KEY
  python export_coda_page.py

–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:
  1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://coda.io/account
  2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "API Settings"
  3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω
  4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω (–æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!)
        """
    )
    parser.add_argument(
        "--api-key",
        help="API –∫–ª—é—á –æ—Ç Coda (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CODA_API_KEY)"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.api_key:
        return args.api_key
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.environ.get("CODA_API_KEY")
    if api_key:
        return api_key
    
    # –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
    print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print()
    print("–£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:")
    print()
    print("1. –ß–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:")
    print("   python export_coda_page.py --api-key YOUR_API_KEY")
    print()
    print("2. –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (Windows PowerShell):")
    print("   $env:CODA_API_KEY=\"YOUR_API_KEY\"")
    print("   python export_coda_page.py")
    print()
    print("3. –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (Windows CMD):")
    print("   set CODA_API_KEY=YOUR_API_KEY")
    print("   python export_coda_page.py")
    print()
    print("üìñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:")
    print("   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://coda.io/account")
    print("   2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª 'API Settings'")
    print("   3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω")
    print("   4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω (–æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!)")
    print()
    sys.exit(1)


def start_export(api_key, doc_id, page_id):
    """–ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    url = f"{CODA_API_BASE}/docs/{doc_id}/pages/{page_id}/export"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "outputFormat": "markdown"
    }
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}...")
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        
        data = response.json()
        export_id = data.get("id")
        status_href = data.get("href")
        
        if not export_id or not status_href:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {data}")
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! ID: {export_id}")
        return status_href
        
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        elif e.response.status_code == 403:
            raise Exception("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç")
        elif e.response.status_code == 404:
            raise Exception(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {page_id}")
        else:
            raise Exception(f"HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {e.response.text}")
    except requests.exceptions.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")


def poll_export_status(api_key, status_href):
    """–û–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    headers = {
        "Authorization": f"Bearer {api_key}"
    }
    
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    start_time = time.time()
    dots = 0
    
    while True:
        elapsed = time.time() - start_time
        
        if elapsed > MAX_WAIT_TIME:
            raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({MAX_WAIT_TIME} —Å–µ–∫—É–Ω–¥)")
        
        try:
            response = requests.get(status_href, headers=headers)
            response.raise_for_status()
            data = response.json()
            
            status = data.get("status")
            
            if status == "complete":
                download_link = data.get("downloadLink")
                if not download_link:
                    raise Exception("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥!")
                return download_link
            
            elif status == "failed":
                error = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                raise Exception(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error}")
            
            elif status in ["inProgress", "queued"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                dots = (dots + 1) % 4
                print(f"\r‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ{'.' * dots}{' ' * (3 - dots)} ({elapsed:.0f}—Å)", end="", flush=True)
                time.sleep(POLL_INTERVAL)
            
            else:
                print(f"\n‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                time.sleep(POLL_INTERVAL)
                
        except requests.exceptions.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")


def download_file(api_key, download_link, output_path):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."""
    # –î–ª—è S3 –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL –Ω–µ –Ω—É–∂–µ–Ω Authorization header
    print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    
    try:
        response = requests.get(download_link)
        response.raise_for_status()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        output_file.write_text(response.text, encoding="utf-8")
        
        file_size = len(response.text)
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:,} —Å–∏–º–≤–æ–ª–æ–≤ ({file_size / 1024:.1f} KB)")
        
    except requests.exceptions.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
    except IOError as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=" * 80)
    print("üîß Coda Pages Exporter")
    print("=" * 80)
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = get_api_key()
    
    print(f"üìö –≠–∫—Å–ø–æ—Ä—Ç {len(PAGES_TO_EXPORT)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {DOC_ID}")
    print()
    
    exported_files = []
    failed_exports = []
    
    for idx, (page_id, output_filename) in enumerate(PAGES_TO_EXPORT, 1):
        print(f"\n{'='*80}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {idx}/{len(PAGES_TO_EXPORT)}: {output_filename}")
        print(f"{'='*80}\n")
        
        output_path = f"{OUTPUT_DIR}/{output_filename}"
        
        try:
            # –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            status_href = start_export(api_key, DOC_ID, page_id)
            
            # –®–∞–≥ 2: –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            download_link = poll_export_status(api_key, status_href)
            
            # –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_file(api_key, download_link, output_path)
            
            exported_files.append(output_path)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
            failed_exports.append((output_filename, str(e)))
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
        if idx < len(PAGES_TO_EXPORT):
            time.sleep(1)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print()
    print("=" * 80)
    print("üìä –ò—Ç–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    print("=" * 80)
    print()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(exported_files)}/{len(PAGES_TO_EXPORT)}")
    
    if exported_files:
        print("\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in exported_files:
            print(f"   ‚Ä¢ {file_path}")
    
    if failed_exports:
        print(f"\n‚ùå –û—à–∏–±–∫–∏: {len(failed_exports)}")
        for filename, error in failed_exports:
            print(f"   ‚Ä¢ {filename}: {error}")
    
    print()
    print("=" * 80)
    if len(exported_files) == len(PAGES_TO_EXPORT):
        print("üéâ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
    elif exported_files:
        print("‚ö†Ô∏è  –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("=" * 80)
    print()


if __name__ == "__main__":
    main()

