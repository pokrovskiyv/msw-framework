#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞¬ª.

–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç:
- Git pre-commit hook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- GitHub Actions workflow (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python scripts/install_automation.py
  python scripts/install_automation.py --github-actions
  python scripts/install_automation.py --help
"""

import os
import sys
import argparse
import shutil
import subprocess
from pathlib import Path
from typing import List, Tuple

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def get_project_root() -> Path:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞."""
    return Path(__file__).parent.parent

def check_git_repo(project_root: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    git_dir = project_root / ".git"
    return git_dir.exists() and git_dir.is_dir()

def install_pre_commit_hook(project_root: Path) -> Tuple[bool, str]:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hook.
    
    Returns:
        (success, message)
    """
    hooks_dir = project_root / ".git" / "hooks"
    hook_template = project_root / "scripts" / "pre-commit.sh"
    hook_target = hooks_dir / "pre-commit"
    
    if not hooks_dir.exists():
        return False, "‚ùå –ü–∞–ø–∫–∞ .git/hooks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    if not hook_template.exists():
        return False, "‚ùå –®–∞–±–ª–æ–Ω pre-commit.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ scripts/"
    
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
        shutil.copy2(hook_template, hook_target)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(hook_target, 0o755)
        
        return True, "‚úÖ Pre-commit hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ hook: {e}"

def check_cli_installation(project_root: Path) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
    
    Returns:
        (is_installed, message)
    """
    try:
        result = subprocess.run(
            ['course', '--help'],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.returncode == 0:
            return True, "‚úÖ CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else:
            return False, "‚ö†Ô∏è  CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    except (subprocess.TimeoutExpired, FileNotFoundError):
        return False, "‚ö†Ô∏è  CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

def install_cli(project_root: Path) -> Tuple[bool, str]:
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
    
    Returns:
        (success, message)
    """
    cli_dir = project_root / "course_cli"
    
    if not cli_dir.exists():
        return False, "‚ùå –ü–∞–ø–∫–∞ course_cli/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CLI
        result = subprocess.run(
            ['pip', 'install', '-e', '.'],
            cwd=cli_dir,
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            return True, "‚úÖ CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ CLI: {result.stderr}"
    
    except (subprocess.TimeoutExpired, FileNotFoundError) as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ CLI: {e}"

def create_github_actions(project_root: Path) -> Tuple[bool, str]:
    """
    –°–æ–∑–¥–∞—Ç—å GitHub Actions workflow.
    
    Returns:
        (success, message)
    """
    workflows_dir = project_root / ".github" / "workflows"
    workflow_file = workflows_dir / "docs-check.yml"
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É .github/workflows –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    workflows_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ workflow
    workflow_content = """name: Documentation Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  check-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check documentation sync
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
        python scripts/check_docs_sync.py --strict
        
    - name: Comment on PR if issues found
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!**\\n\\n' +
                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ merge:\\n' +
                  '```bash\\n' +
                  'python scripts/update_docs.py\\n' +
                  '```\\n\\n' +
                  '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤ [–ª–æ–≥–∞—Ö CI]({{ github.server_url }}/{{ github.repository }}/actions/runs/{{ github.run_id }}).'
          })
"""
    
    try:
        workflow_file.write_text(workflow_content, encoding="utf-8")
        return True, "‚úÖ GitHub Actions workflow —Å–æ–∑–¥–∞–Ω"
    
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow: {e}"

def test_scripts(project_root: Path) -> Tuple[bool, str]:
    """
    –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–æ–≤.
    
    Returns:
        (success, message)
    """
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º check_docs_sync.py
        result = subprocess.run(
            [sys.executable, "scripts/check_docs_sync.py", "--help"],
            cwd=project_root,
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode != 0:
            return False, "‚ùå –°–∫—Ä–∏–ø—Ç check_docs_sync.py –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º update_docs.py
        result = subprocess.run(
            [sys.executable, "scripts/update_docs.py", "--help"],
            cwd=project_root,
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode != 0:
            return False, "‚ùå –°–∫—Ä–∏–ø—Ç update_docs.py –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        return True, "‚úÖ –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    
    except (subprocess.TimeoutExpired, FileNotFoundError) as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}"

def print_instructions():
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print(f"\n{Colors.BOLD}{Colors.HEADER}üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é{Colors.ENDC}")
    print(f"{Colors.BOLD}{'='*60}{Colors.ENDC}")
    
    print(f"\n{Colors.OKCYAN}üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:{Colors.ENDC}")
    print(f"  ‚Ä¢ {Colors.OKGREEN}python scripts/check_docs_sync.py{Colors.ENDC} ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print(f"  ‚Ä¢ {Colors.OKGREEN}python scripts/update_docs.py{Colors.ENDC} ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print(f"  ‚Ä¢ {Colors.OKGREEN}course docs check{Colors.ENDC} ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ CLI (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    print(f"  ‚Ä¢ {Colors.OKGREEN}course docs update{Colors.ENDC} ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ CLI (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    
    print(f"\n{Colors.OKCYAN}üöÄ Workflow:{Colors.ENDC}")
    print(f"  1. –î–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ weeks/, templates/, CLI –∏ —Ç.–¥.")
    print(f"  2. –ü—Ä–∏ {Colors.WARNING}git commit{Colors.ENDC} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print(f"  3. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print(f"  4. –ü—Ä–∏ push –Ω–∞ GitHub ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ CI/CD")
    
    print(f"\n{Colors.OKCYAN}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:{Colors.ENDC}")
    print(f"  ‚Ä¢ {Colors.WARNING}--strict{Colors.ENDC} ‚Äî —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print(f"  ‚Ä¢ {Colors.WARNING}--days N{Colors.ENDC} ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ N –¥–Ω–µ–π")
    print(f"  ‚Ä¢ {Colors.WARNING}--no-interactive{Colors.ENDC} ‚Äî –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    
    print(f"\n{Colors.OKCYAN}üÜò Troubleshooting:{Colors.ENDC}")
    print(f"  ‚Ä¢ –ï—Å–ª–∏ hook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {Colors.WARNING}chmod +x .git/hooks/pre-commit{Colors.ENDC}")
    print(f"  ‚Ä¢ –ï—Å–ª–∏ CLI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {Colors.WARNING}cd course_cli && pip install -e .{Colors.ENDC}")
    print(f"  ‚Ä¢ –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {Colors.WARNING}python scripts/check_docs_sync.py --help{Colors.ENDC}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    parser = argparse.ArgumentParser(
        description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞¬ª",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/install_automation.py
  python scripts/install_automation.py --github-actions
  python scripts/install_automation.py --install-cli
        """
    )
    
    parser.add_argument(
        '--github-actions',
        action='store_true',
        help='–°–æ–∑–¥–∞—Ç—å GitHub Actions workflow'
    )
    
    parser.add_argument(
        '--install-cli',
        action='store_true',
        help='–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'
    )
    
    parser.add_argument(
        '--test-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å'
    )
    
    args = parser.parse_args()
    
    project_root = get_project_root()
    
    print(f"\n{Colors.BOLD}{'='*70}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.HEADER}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏{Colors.ENDC}")
    print(f"{Colors.BOLD}{'='*70}{Colors.ENDC}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not check_git_repo(project_root):
        print(f"{Colors.FAIL}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ {project_root}{Colors.ENDC}")
        print(f"{Colors.OKCYAN}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è{Colors.ENDC}")
        return 1
    
    print(f"{Colors.OKGREEN}‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω{Colors.ENDC}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    print(f"\n{Colors.OKCYAN}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤...{Colors.ENDC}")
    success, message = test_scripts(project_root)
    print(f"  {message}")
    
    if not success:
        print(f"{Colors.FAIL}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã{Colors.ENDC}")
        return 1
    
    if args.test_only:
        print(f"\n{Colors.OKGREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ{Colors.ENDC}")
        return 0
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pre-commit hook
    print(f"\n{Colors.OKCYAN}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit hook...{Colors.ENDC}")
    success, message = install_pre_commit_hook(project_root)
    print(f"  {message}")
    
    if not success:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hook{Colors.ENDC}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CLI
    print(f"\n{Colors.OKCYAN}üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...{Colors.ENDC}")
    cli_installed, cli_message = check_cli_installation(project_root)
    print(f"  {cli_message}")
    
    if not cli_installed and args.install_cli:
        print(f"\n{Colors.OKCYAN}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...{Colors.ENDC}")
        success, message = install_cli(project_root)
        print(f"  {message}")
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑
            cli_installed, cli_message = check_cli_installation(project_root)
            print(f"  {cli_message}")
    
    # –°–æ–∑–¥–∞—ë–º GitHub Actions (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
    if args.github_actions:
        print(f"\n{Colors.OKCYAN}üîÑ –°–æ–∑–¥–∞–Ω–∏–µ GitHub Actions workflow...{Colors.ENDC}")
        success, message = create_github_actions(project_root)
        print(f"  {message}")
        
        if not success:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GitHub Actions workflow{Colors.ENDC}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print(f"\n{Colors.BOLD}{'='*70}{Colors.ENDC}")
    print(f"{Colors.OKGREEN}{Colors.BOLD}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.ENDC}")
    
    if cli_installed:
        print(f"\n{Colors.OKCYAN}üéØ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:{Colors.ENDC}")
        print(f"  ‚Ä¢ {Colors.OKGREEN}course docs check{Colors.ENDC}")
        print(f"  ‚Ä¢ {Colors.OKGREEN}course docs update{Colors.ENDC}")
    
    print_instructions()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
