#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ relations –≤ –æ–Ω—Ç–æ–ª–æ–≥–∏–∏.

–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã —á–µ—Ä–µ–∑ ontology_toolkit –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ relations, —á—Ç–æ–±—ã Cursor AI –º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ descriptions.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –≤ Agent Mode –≤ Cursor:
    1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python enrich_relations_interactive.py --prepare
    2. –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª enrichment_data.json —Å–æ –≤—Å–µ–º–∏ –∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏
    3. Cursor AI –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–∏—Ç descriptions –¥–ª—è relations
    4. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python enrich_relations_interactive.py --apply
    5. –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ontology_toolkit
sys.path.insert(0, str(Path(__file__).parent / "ontology_toolkit"))

from ontology_toolkit.core.ontology import Ontology
from ontology_toolkit.core.schema import Relation, RelationType

def prepare_enrichment_data(ontology: Ontology) -> dict:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –∫–æ–Ω—Ü–µ–ø—Ç–∞—Ö –∏ –∏—Ö relations.
    """
    data = {
        'concepts': [],
        'total': 0
    }
    
    concepts = [e for e in ontology.index.by_id.values() if e.id.startswith('C_')]
    data['total'] = len(concepts)
    
    for concept in concepts:
        concept_data = {
            'id': concept.id,
            'name': concept.name,
            'definition': concept.definition,
            'meta_meta': concept.meta_meta,
            'relations': []
        }
        
        for rel in concept.relations:
            target = ontology.index.by_id.get(rel.target)
            target_name = target.name if target else "???"
            target_meta = target.meta_meta if target else "???"
            
            relation_data = {
                'type': rel.type.value,
                'target_id': rel.target,
                'target_name': target_name,
                'target_meta': target_meta,
                'current_description': rel.description,
                'suggested_description': None  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ AI
            }
            
            concept_data['relations'].append(relation_data)
        
        data['concepts'].append(concept_data)
    
    return data

def apply_enrichment(ontology: Ontology, enrichment_file: Path):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ü–µ–ø—Ç–∞–º.
    """
    with open(enrichment_file, 'r', encoding='utf-8') as f:
        enriched_data = json.load(f)
    
    stats = {
        'processed': 0,
        'enriched_relations': 0,
        'errors': 0
    }
    
    for concept_data in enriched_data['concepts']:
        concept_id = concept_data['id']
        concept = ontology.index.by_id.get(concept_id)
        
        if not concept:
            print(f"‚úó –ö–æ–Ω—Ü–µ–ø—Ç {concept_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            stats['errors'] += 1
            continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º relations —Å –Ω–æ–≤—ã–º–∏ descriptions
        new_relations = []
        for rel_data in concept_data['relations']:
            description = rel_data.get('suggested_description') or rel_data.get('current_description')
            
            new_relations.append(Relation(
                type=RelationType(rel_data['type']),
                target=rel_data['target_id'],
                description=description
            ))
        
        concept.relations = new_relations
        concept.updated = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        from ontology_toolkit.core.concept import save_entity_to_file
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
        concepts_dir = Path(".ontology") / "concepts"
        concept_file = None
        
        for file_path in concepts_dir.glob(f"{concept_id}_*.md"):
            concept_file = file_path
            break
        
        if concept_file:
            save_entity_to_file(concept, concept_file)
            enriched_count = len([r for r in new_relations if r.description])
            stats['enriched_relations'] += enriched_count
            stats['processed'] += 1
            print(f"‚úì {concept_id} ‚Äî {concept.name}: {enriched_count} relations enriched")
        else:
            print(f"‚úó –§–∞–π–ª –¥–ª—è {concept_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            stats['errors'] += 1
    
    return stats

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="–û–±–æ–≥–∞—â–µ–Ω–∏–µ relations –≤ –æ–Ω—Ç–æ–ª–æ–≥–∏–∏")
    parser.add_argument('--prepare', action='store_true', help="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
    parser.add_argument('--apply', action='store_true', help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    parser.add_argument('--output', default='enrichment_data.json', help="–§–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω—Ç–æ–ª–æ–≥–∏—é
    ontology_path = Path(".ontology")
    if not ontology_path.exists():
        print("‚úó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .ontology –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return 1
    
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–Ω—Ç–æ–ª–æ–≥–∏–∏...")
    ontology = Ontology(ontology_path)
    ontology.load_all()
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(ontology.index.by_id)}")
    
    if args.prepare:
        print("\nüìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è...")
        data = prepare_enrichment_data(ontology)
        
        output_file = Path(args.output)
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úì –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        print(f"  –ö–æ–Ω—Ü–µ–ø—Ç–æ–≤: {data['total']}")
        print(f"  Relations –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {sum(len(c['relations']) for c in data['concepts'])}")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
        print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ enrichment_data.json")
        print("  2. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ Cursor AI –∑–∞–ø–æ–ª–Ω–∏—Ç—å 'suggested_description' –¥–ª—è –∫–∞–∂–¥–æ–π relation")
        print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python enrich_relations_interactive.py --apply")
        
    elif args.apply:
        print("\nüìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        enrichment_file = Path(args.output)
        
        if not enrichment_file.exists():
            print(f"‚úó –§–∞–π–ª {enrichment_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("  –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å --prepare")
            return 1
        
        stats = apply_enrichment(ontology, enrichment_file)
        
        print(f"\n{'='*60}")
        print(f"–ò–¢–û–ì–û")
        print(f"{'='*60}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤: {stats['processed']}")
        print(f"–û–±–æ–≥–∞—â–µ–Ω–æ relations: {stats['enriched_relations']}")
        print(f"–û—à–∏–±–æ–∫: {stats['errors']}")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. ontology audit")
        print("  2. ontology export --format csv --output ontology_v2.4_enriched.csv")
        print("  3. ontology graph --output visuals/ontology_enriched.mmd")
        
    else:
        parser.print_help()
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

